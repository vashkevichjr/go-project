// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: habit_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHabit = `-- name: CreateHabit :one
INSERT INTO habits (user_id, name, description)
VALUES ($1, $2, $3)
RETURNING id, user_id, name, description, created_at
`

type CreateHabitParams struct {
	UserID      pgtype.UUID
	Name        string
	Description pgtype.Text
}

func (q *Queries) CreateHabit(ctx context.Context, arg CreateHabitParams) (Habit, error) {
	row := q.db.QueryRow(ctx, createHabit, arg.UserID, arg.Name, arg.Description)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteHabit = `-- name: DeleteHabit :exec
DELETE FROM habits
WHERE id = $1 AND user_id = $2
`

type DeleteHabitParams struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) DeleteHabit(ctx context.Context, arg DeleteHabitParams) error {
	_, err := q.db.Exec(ctx, deleteHabit, arg.ID, arg.UserID)
	return err
}

const getHabitByID = `-- name: GetHabitByID :one
SELECT id, user_id, name, description, created_at FROM habits
WHERE id = $1 AND user_id = $2
`

type GetHabitByIDParams struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) GetHabitByID(ctx context.Context, arg GetHabitByIDParams) (Habit, error) {
	row := q.db.QueryRow(ctx, getHabitByID, arg.ID, arg.UserID)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listHabitsByUserID = `-- name: ListHabitsByUserID :many
SELECT id, user_id, name, description, created_at FROM habits
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListHabitsByUserID(ctx context.Context, userID pgtype.UUID) ([]Habit, error) {
	rows, err := q.db.Query(ctx, listHabitsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHabit = `-- name: UpdateHabit :one
UPDATE habits
SET name = $3, description = $4
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, name, description, created_at
`

type UpdateHabitParams struct {
	ID          pgtype.UUID
	UserID      pgtype.UUID
	Name        string
	Description pgtype.Text
}

func (q *Queries) UpdateHabit(ctx context.Context, arg UpdateHabitParams) (Habit, error) {
	row := q.db.QueryRow(ctx, updateHabit,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
	)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
